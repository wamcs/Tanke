package com.lptiyu.tanke.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.lptiyu.tanke.database.DBGameRecord;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBGAME_RECORD".
*/
public class DBGameRecordDao extends AbstractDao<DBGameRecord, Long> {

    public static final String TABLENAME = "DBGAME_RECORD";

    /**
     * Properties of entity DBGameRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Join_time = new Property(1, String.class, "join_time", false, "JOIN_TIME");
        public final static Property Start_time = new Property(2, String.class, "start_time", false, "START_TIME");
        public final static Property Last_task_ftime = new Property(3, String.class, "last_task_ftime", false, "LAST_TASK_FTIME");
        public final static Property Play_statu = new Property(4, String.class, "play_statu", false, "PLAY_STATU");
        public final static Property Ranks_id = new Property(5, String.class, "ranks_id", false, "RANKS_ID");
        public final static Property Game_id = new Property(6, String.class, "game_id", false, "GAME_ID");
        public final static Property Line_id = new Property(7, String.class, "line_id", false, "LINE_ID");
        public final static Property Uid = new Property(8, String.class, "uid", false, "UID");
    };

    private DaoSession daoSession;


    public DBGameRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DBGameRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBGAME_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"JOIN_TIME\" TEXT," + // 1: join_time
                "\"START_TIME\" TEXT," + // 2: start_time
                "\"LAST_TASK_FTIME\" TEXT," + // 3: last_task_ftime
                "\"PLAY_STATU\" TEXT," + // 4: play_statu
                "\"RANKS_ID\" TEXT," + // 5: ranks_id
                "\"GAME_ID\" TEXT," + // 6: game_id
                "\"LINE_ID\" TEXT," + // 7: line_id
                "\"UID\" TEXT);"); // 8: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBGAME_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBGameRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String join_time = entity.getJoin_time();
        if (join_time != null) {
            stmt.bindString(2, join_time);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(3, start_time);
        }
 
        String last_task_ftime = entity.getLast_task_ftime();
        if (last_task_ftime != null) {
            stmt.bindString(4, last_task_ftime);
        }
 
        String play_statu = entity.getPlay_statu();
        if (play_statu != null) {
            stmt.bindString(5, play_statu);
        }
 
        String ranks_id = entity.getRanks_id();
        if (ranks_id != null) {
            stmt.bindString(6, ranks_id);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(7, game_id);
        }
 
        String line_id = entity.getLine_id();
        if (line_id != null) {
            stmt.bindString(8, line_id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(9, uid);
        }
    }

    @Override
    protected void attachEntity(DBGameRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBGameRecord readEntity(Cursor cursor, int offset) {
        DBGameRecord entity = new DBGameRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // join_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // start_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_task_ftime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // play_statu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ranks_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // game_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // line_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // uid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBGameRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJoin_time(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStart_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_task_ftime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlay_statu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRanks_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGame_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLine_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBGameRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBGameRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
