package com.lptiyu.tanke.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.lptiyu.tanke.database.DBPointRecord;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBPOINT_RECORD".
*/
public class DBPointRecordDao extends AbstractDao<DBPointRecord, Long> {

    public static final String TABLENAME = "DBPOINT_RECORD";

    /**
     * Properties of entity DBPointRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Statu = new Property(1, String.class, "statu", false, "STATU");
        public final static Property Point_id = new Property(2, String.class, "point_id", false, "POINT_ID");
    };

    private DaoSession daoSession;

    private Query<DBPointRecord> dBGameRecord_Record_textQuery;

    public DBPointRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DBPointRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBPOINT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATU\" TEXT," + // 1: statu
                "\"POINT_ID\" TEXT);"); // 2: point_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBPOINT_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBPointRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String statu = entity.getStatu();
        if (statu != null) {
            stmt.bindString(2, statu);
        }
 
        String point_id = entity.getPoint_id();
        if (point_id != null) {
            stmt.bindString(3, point_id);
        }
    }

    @Override
    protected void attachEntity(DBPointRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBPointRecord readEntity(Cursor cursor, int offset) {
        DBPointRecord entity = new DBPointRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // statu
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // point_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBPointRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatu(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPoint_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBPointRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBPointRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "record_text" to-many relationship of DBGameRecord. */
    public List<DBPointRecord> _queryDBGameRecord_Record_text(Long id) {
        synchronized (this) {
            if (dBGameRecord_Record_textQuery == null) {
                QueryBuilder<DBPointRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                dBGameRecord_Record_textQuery = queryBuilder.build();
            }
        }
        Query<DBPointRecord> query = dBGameRecord_Record_textQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
