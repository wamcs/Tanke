package com.lptiyu.tanke.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.lptiyu.tanke.database.DBTaskRecord;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBTASK_RECORD".
*/
public class DBTaskRecordDao extends AbstractDao<DBTaskRecord, Long> {

    public static final String TABLENAME = "DBTASK_RECORD";

    /**
     * Properties of entity DBTaskRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ftime = new Property(1, String.class, "ftime", false, "FTIME");
        public final static Property TaskId = new Property(2, String.class, "taskId", false, "TASK_ID");
        public final static Property Exp = new Property(3, String.class, "exp", false, "EXP");
    };

    private Query<DBTaskRecord> dBPointRecord_TaskQuery;

    public DBTaskRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DBTaskRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBTASK_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FTIME\" TEXT," + // 1: ftime
                "\"TASK_ID\" TEXT," + // 2: taskId
                "\"EXP\" TEXT);"); // 3: exp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBTASK_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBTaskRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ftime = entity.getFtime();
        if (ftime != null) {
            stmt.bindString(2, ftime);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(3, taskId);
        }
 
        String exp = entity.getExp();
        if (exp != null) {
            stmt.bindString(4, exp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBTaskRecord readEntity(Cursor cursor, int offset) {
        DBTaskRecord entity = new DBTaskRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ftime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // exp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBTaskRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFtime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBTaskRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBTaskRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "task" to-many relationship of DBPointRecord. */
    public List<DBTaskRecord> _queryDBPointRecord_Task(Long id) {
        synchronized (this) {
            if (dBPointRecord_TaskQuery == null) {
                QueryBuilder<DBTaskRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                dBPointRecord_TaskQuery = queryBuilder.build();
            }
        }
        Query<DBTaskRecord> query = dBPointRecord_TaskQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
