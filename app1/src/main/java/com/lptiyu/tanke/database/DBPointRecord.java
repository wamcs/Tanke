package com.lptiyu.tanke.database;

import com.lptiyu.tanke.database.DaoSession;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBPOINT_RECORD".
 */
public class DBPointRecord {

    private Long id;
    private String statu;
    private String point_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBPointRecordDao myDao;

    private List<DBTaskRecord> task;

    public DBPointRecord() {
    }

    public DBPointRecord(Long id) {
        this.id = id;
    }

    public DBPointRecord(Long id, String statu, String point_id) {
        this.id = id;
        this.statu = statu;
        this.point_id = point_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBPointRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getStatu() {
        return statu;
    }

    public void setStatu(String statu) {
        this.statu = statu;
    }

    public String getPoint_id() {
        return point_id;
    }

    public void setPoint_id(String point_id) {
        this.point_id = point_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBTaskRecord> getTask() {
        if (task == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBTaskRecordDao targetDao = daoSession.getDBTaskRecordDao();
            List<DBTaskRecord> taskNew = targetDao._queryDBPointRecord_Task(id);
            synchronized (this) {
                if(task == null) {
                    task = taskNew;
                }
            }
        }
        return task;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTask() {
        task = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {
        return "DBPointRecord{" +
                "id=" + id +
                ", statu='" + statu + '\'' +
                ", point_id='" + point_id + '\'' +
                ", task=" + task +
                '}';
    }
}
