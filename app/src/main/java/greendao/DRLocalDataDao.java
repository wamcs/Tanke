package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lptiyu.tanke.entity.greendao.DRLocalData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRLOCAL_DATA".
*/
public class DRLocalDataDao extends AbstractDao<DRLocalData, Long> {

    public static final String TABLENAME = "DRLOCAL_DATA";

    /**
     * Properties of entity DRLocalData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Record_id = new Property(1, String.class, "record_id", false, "RECORD_ID");
        public final static Property Game_id = new Property(2, String.class, "game_id", false, "GAME_ID");
        public final static Property StartTime = new Property(3, String.class, "startTime", false, "START_TIME");
        public final static Property TotalDistance = new Property(4, String.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property PreviousPointId = new Property(5, String.class, "previousPointId", false, "PREVIOUS_POINT_ID");
        public final static Property PreviousPointLatitude = new Property(6, String.class, "previousPointLatitude", false, "PREVIOUS_POINT_LATITUDE");
        public final static Property PreviousPointLongitude = new Property(7, String.class, "previousPointLongitude", false, "PREVIOUS_POINT_LONGITUDE");
        public final static Property LastPointLatitude = new Property(8, String.class, "lastPointLatitude", false, "LAST_POINT_LATITUDE");
        public final static Property LastPointLongitude = new Property(9, String.class, "lastPointLongitude", false, "LAST_POINT_LONGITUDE");
        public final static Property FileName = new Property(10, String.class, "fileName", false, "FILE_NAME");
        public final static Property TimeStamp = new Property(11, String.class, "timeStamp", false, "TIME_STAMP");
    }


    public DRLocalDataDao(DaoConfig config) {
        super(config);
    }
    
    public DRLocalDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRLOCAL_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_ID\" TEXT," + // 1: record_id
                "\"GAME_ID\" TEXT," + // 2: game_id
                "\"START_TIME\" TEXT," + // 3: startTime
                "\"TOTAL_DISTANCE\" TEXT," + // 4: totalDistance
                "\"PREVIOUS_POINT_ID\" TEXT," + // 5: previousPointId
                "\"PREVIOUS_POINT_LATITUDE\" TEXT," + // 6: previousPointLatitude
                "\"PREVIOUS_POINT_LONGITUDE\" TEXT," + // 7: previousPointLongitude
                "\"LAST_POINT_LATITUDE\" TEXT," + // 8: lastPointLatitude
                "\"LAST_POINT_LONGITUDE\" TEXT," + // 9: lastPointLongitude
                "\"FILE_NAME\" TEXT," + // 10: fileName
                "\"TIME_STAMP\" TEXT);"); // 11: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRLOCAL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DRLocalData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindString(2, record_id);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(3, game_id);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(4, startTime);
        }
 
        String totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindString(5, totalDistance);
        }
 
        String previousPointId = entity.getPreviousPointId();
        if (previousPointId != null) {
            stmt.bindString(6, previousPointId);
        }
 
        String previousPointLatitude = entity.getPreviousPointLatitude();
        if (previousPointLatitude != null) {
            stmt.bindString(7, previousPointLatitude);
        }
 
        String previousPointLongitude = entity.getPreviousPointLongitude();
        if (previousPointLongitude != null) {
            stmt.bindString(8, previousPointLongitude);
        }
 
        String lastPointLatitude = entity.getLastPointLatitude();
        if (lastPointLatitude != null) {
            stmt.bindString(9, lastPointLatitude);
        }
 
        String lastPointLongitude = entity.getLastPointLongitude();
        if (lastPointLongitude != null) {
            stmt.bindString(10, lastPointLongitude);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(11, fileName);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(12, timeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DRLocalData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindString(2, record_id);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(3, game_id);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(4, startTime);
        }
 
        String totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindString(5, totalDistance);
        }
 
        String previousPointId = entity.getPreviousPointId();
        if (previousPointId != null) {
            stmt.bindString(6, previousPointId);
        }
 
        String previousPointLatitude = entity.getPreviousPointLatitude();
        if (previousPointLatitude != null) {
            stmt.bindString(7, previousPointLatitude);
        }
 
        String previousPointLongitude = entity.getPreviousPointLongitude();
        if (previousPointLongitude != null) {
            stmt.bindString(8, previousPointLongitude);
        }
 
        String lastPointLatitude = entity.getLastPointLatitude();
        if (lastPointLatitude != null) {
            stmt.bindString(9, lastPointLatitude);
        }
 
        String lastPointLongitude = entity.getLastPointLongitude();
        if (lastPointLongitude != null) {
            stmt.bindString(10, lastPointLongitude);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(11, fileName);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(12, timeStamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DRLocalData readEntity(Cursor cursor, int offset) {
        DRLocalData entity = new DRLocalData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // record_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // game_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // totalDistance
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // previousPointId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // previousPointLatitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // previousPointLongitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastPointLatitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lastPointLongitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DRLocalData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecord_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGame_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalDistance(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPreviousPointId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPreviousPointLatitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPreviousPointLongitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastPointLatitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLastPointLongitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTimeStamp(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DRLocalData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DRLocalData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DRLocalData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
