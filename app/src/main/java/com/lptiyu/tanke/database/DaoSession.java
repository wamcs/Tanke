package com.lptiyu.tanke.database;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.lptiyu.tanke.database.MessageNotification;
import com.lptiyu.tanke.database.MessageNotificationList;
import com.lptiyu.tanke.database.DBGameRecord;
import com.lptiyu.tanke.database.DBPointRecord;
import com.lptiyu.tanke.database.DBTaskRecord;

import com.lptiyu.tanke.database.MessageNotificationDao;
import com.lptiyu.tanke.database.MessageNotificationListDao;
import com.lptiyu.tanke.database.DBGameRecordDao;
import com.lptiyu.tanke.database.DBPointRecordDao;
import com.lptiyu.tanke.database.DBTaskRecordDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig messageNotificationDaoConfig;
    private final DaoConfig messageNotificationListDaoConfig;
    private final DaoConfig dBGameRecordDaoConfig;
    private final DaoConfig dBPointRecordDaoConfig;
    private final DaoConfig dBTaskRecordDaoConfig;

    private final MessageNotificationDao messageNotificationDao;
    private final MessageNotificationListDao messageNotificationListDao;
    private final DBGameRecordDao dBGameRecordDao;
    private final DBPointRecordDao dBPointRecordDao;
    private final DBTaskRecordDao dBTaskRecordDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        messageNotificationDaoConfig = daoConfigMap.get(MessageNotificationDao.class).clone();
        messageNotificationDaoConfig.initIdentityScope(type);

        messageNotificationListDaoConfig = daoConfigMap.get(MessageNotificationListDao.class).clone();
        messageNotificationListDaoConfig.initIdentityScope(type);

        dBGameRecordDaoConfig = daoConfigMap.get(DBGameRecordDao.class).clone();
        dBGameRecordDaoConfig.initIdentityScope(type);

        dBPointRecordDaoConfig = daoConfigMap.get(DBPointRecordDao.class).clone();
        dBPointRecordDaoConfig.initIdentityScope(type);

        dBTaskRecordDaoConfig = daoConfigMap.get(DBTaskRecordDao.class).clone();
        dBTaskRecordDaoConfig.initIdentityScope(type);

        messageNotificationDao = new MessageNotificationDao(messageNotificationDaoConfig, this);
        messageNotificationListDao = new MessageNotificationListDao(messageNotificationListDaoConfig, this);
        dBGameRecordDao = new DBGameRecordDao(dBGameRecordDaoConfig, this);
        dBPointRecordDao = new DBPointRecordDao(dBPointRecordDaoConfig, this);
        dBTaskRecordDao = new DBTaskRecordDao(dBTaskRecordDaoConfig, this);

        registerDao(MessageNotification.class, messageNotificationDao);
        registerDao(MessageNotificationList.class, messageNotificationListDao);
        registerDao(DBGameRecord.class, dBGameRecordDao);
        registerDao(DBPointRecord.class, dBPointRecordDao);
        registerDao(DBTaskRecord.class, dBTaskRecordDao);
    }
    
    public void clear() {
        messageNotificationDaoConfig.getIdentityScope().clear();
        messageNotificationListDaoConfig.getIdentityScope().clear();
        dBGameRecordDaoConfig.getIdentityScope().clear();
        dBPointRecordDaoConfig.getIdentityScope().clear();
        dBTaskRecordDaoConfig.getIdentityScope().clear();
    }

    public MessageNotificationDao getMessageNotificationDao() {
        return messageNotificationDao;
    }

    public MessageNotificationListDao getMessageNotificationListDao() {
        return messageNotificationListDao;
    }

    public DBGameRecordDao getDBGameRecordDao() {
        return dBGameRecordDao;
    }

    public DBPointRecordDao getDBPointRecordDao() {
        return dBPointRecordDao;
    }

    public DBTaskRecordDao getDBTaskRecordDao() {
        return dBTaskRecordDao;
    }

}
