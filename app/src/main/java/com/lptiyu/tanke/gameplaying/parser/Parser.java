package com.lptiyu.tanke.gameplaying.parser;

import android.content.Context;
import android.graphics.Bitmap;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.net.Uri;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.style.StyleSpan;
import android.view.Gravity;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.MediaController;
import android.widget.VideoView;

import com.bumptech.glide.Glide;
import com.lptiyu.tanke.R;
import com.lptiyu.tanke.utils.DirUtils;
import com.lptiyu.tanke.utils.Display;
import com.lptiyu.tanke.utils.Inflater;
import com.lptiyu.tanke.utils.NetworkUtil;
import com.lptiyu.tanke.utils.TimeUtils;
import com.lptiyu.tanke.utils.ToastUtil;
import com.lptiyu.tanke.utils.thread;
import com.lptiyu.tanke.widget.CustomTextView;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;


import static android.view.ViewGroup.*;

/**
 * author:wamcs
 * date:2016/7/7
 * email:kaili@hustunique.com
 */
public class Parser {

  @BindView(R.id.clue_display_image_view)
  ImageView mImageView;
  @BindView(R.id.clue_display_video_view)
  VideoView mVideoView;
  @BindView(R.id.clue_display_video_layout)
  LinearLayout mVideoLayout;

  private LinearLayout mShowLayout;

  private DomNode tree;
  private Context context;
  private MediaPlayer player;
  private ImageView lastView;//last audio play button
  private LayoutParams textParams;
  private LayoutParams params;
  private Scanner scanner;
  private OnBeginDecodeListener listener;

  private int size;


  /**
   * @param view viewGroup which will contain views that are generated by DOM tree
   */
  public Parser(Context context, View view) {
    ButterKnife.bind(this, view);
    this.context = context;
    init();
  }

  private void init() {
    scanner = new Scanner();

    size = (int) context.getResources().getDimension(R.dimen.x350);
    textParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
    params = new LayoutParams(size, size);
    LayoutParams videoParams = mVideoView.getLayoutParams();
    videoParams.height=Display.height();
    videoParams.width =Display.width();
    mVideoView.setLayoutParams(videoParams);

  }

  public void setOnBeginDecodeListener(OnBeginDecodeListener listener){
    this.listener =listener;
  }

  public LinearLayout parser(String text,int type,String password,int order){
    setSignText(text);
    return generateView(type,password,order);
  }

  private void setSignText(String text) {
    try {
      tree = scanner.scan(text);
    } catch (Throwable throwable) {
      ToastUtil.TextToast("解析出错");
      throwable.printStackTrace();
    }
  }

  private LinearLayout generateView(int type,String passWord,int order) {
    if (tree == null) {
      return null;
    }

    LayoutParams layoutParams = new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
    mShowLayout = new LinearLayout(context);
    mShowLayout.setOrientation(LinearLayout.VERTICAL);
    mShowLayout.setLayoutParams(layoutParams);
    mShowLayout.setGravity(Gravity.CENTER);
    int i;
    for (i = 0; i < tree.getChildren().size(); i++) {
      DomNode node = tree.getChildren().get(i);
      switch (node.getTag()) {
        case Tag.PARAGRAPH_TAG:
          mShowLayout.addView(generateTextView(node), i);
          break;
        case Tag.AUDIO_TAG:
          mShowLayout.addView(generateAudioView(node), i);
          break;
        case Tag.IMG_TAG:
          mShowLayout.addView(generateImageView(node), i);
          break;
        case Tag.VIDEO_TAG:
          mShowLayout.addView(generateVideoView(node), i);
          break;
      }
    }

    mShowLayout.addView(addBeginButton(type,passWord,order),i);
    return mShowLayout;

  }

  /**
   * @param node generate text view by the node which tag is "p"
   * @return customTextView is the view that is generated
   */
  private CustomTextView generateTextView(DomNode node) {

    //init customView
    CustomTextView customTextView = new CustomTextView(context);
    customTextView.setLayoutParams(textParams);
    int padding = (int) context.getResources().getDimension(R.dimen.clue_display_item_padding);
    customTextView.setPadding(padding, padding, padding, padding);

    if (node.getChildren() == null) {
      customTextView.setText(node.getContent());
      return customTextView;
    }

    List<Integer> boldList = new ArrayList<>();
    StringBuilder stringBuilder = new StringBuilder();
    for (DomNode n : node.getChildren()) {
      switch (n.getTag()) {
        case Tag.NORMAL_TAG:
          stringBuilder.append(n.getContent());
          break;
        case Tag.LINE_FEED_TAG:
          stringBuilder.append("\n");
          break;
        case Tag.BOLD_TAG:
          boldList.add(stringBuilder.length());
          stringBuilder.append(n.getContent());
          boldList.add(stringBuilder.length());
          break;
      }
    }

    SpannableString string = new SpannableString(stringBuilder.toString());
    StyleSpan bold = new StyleSpan(android.graphics.Typeface.BOLD);
    for (int i = 0; i < boldList.size(); i = i + 2) {
      string.setSpan(bold, boldList.get(i), boldList.get(i + 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
    customTextView.setText(string);
    return customTextView;
  }

  /**
   * @param node generate imageView by the node which tag is "img"
   * @return imageView is the view that is generated
   * <p/>
   * when user clicks the imageView,it will zoom in
   */
  private ImageView generateImageView(DomNode node) {
    ImageView imageView = new ImageView(context);
    imageView.setLayoutParams(params);
    final String url = node.getContent();
    Glide.with(context).load(url).into(imageView);

    imageView.setOnClickListener(new OnClickListener() {
      @Override
      public void onClick(View v) {
        Glide.with(context).load(url).into(mImageView);
        mImageView.setVisibility(VISIBLE);
      }
    });
    return imageView;
  }

  /**
   * @param node generate audioView by the node which tag is "audio"
   * @return audioView is the view that is generated
   */
  private View generateAudioView(DomNode node) {
    View audioLayout = Inflater.inflate(R.layout.layout_clue_display_audio, mShowLayout, false);
    audioLayout.setLayoutParams(textParams);
    final ImageView playButton = (ImageView) audioLayout.findViewById(R.id.clue_display_audio_play_button);
    CustomTextView timeText = (CustomTextView) audioLayout.findViewById(R.id.clue_display_audio_time);

    final String url = node.getContent();
    int position = url.lastIndexOf("/"); //symbol '/' position
    final String path = url.substring(position + 1);
    final File file = new File(DirUtils.getAudioDirectory(), path);

    if (!file.exists()) {
      thread.background(
          new Runnable() {
            @Override
            public void run() {
              try {
                download(url, file.getAbsolutePath());
              } catch (MalformedURLException e) {
                e.printStackTrace();
              }
            }
          });
    }

    player = MediaPlayer.create(context, Uri.parse(url));
    if (player.getDuration() == -1) {
      ToastUtil.TextToast("音频加载错误");
      return null;
    }
    timeText.setText(TimeUtils.parseLastPartTime(player.getDuration() / 1000L));
    playButton.setOnClickListener(new OnClickListener() {
      @Override
      public void onClick(View v) {
        if (lastView == null){
          lastView = (ImageView) v;
          player = MediaPlayer.create(context, Uri.parse(file.getAbsolutePath()));
        }else if (!lastView.equals(v)){
          lastView.setImageResource(R.mipmap.ic_play_arrow);
          player.stop();
          lastView = (ImageView) v;
          player = MediaPlayer.create(context, Uri.parse(file.getAbsolutePath()));
        }

        if (player.isPlaying()) {
          player.pause();
          playButton.setImageResource(R.mipmap.ic_play_arrow);
          return;
        }

        player.start();
        playButton.setImageResource(R.mipmap.ic_pause);

      }
    });

    return audioLayout;
  }

  /**
   * @param node generate videoView by the node which tag is "video"
   * @return videoView is the view that is generated
   */
  private ImageView generateVideoView(DomNode node) {
    ImageView imageView = new ImageView(context);
    imageView.setLayoutParams(params);
    final String url = node.getContent();
    int position = url.lastIndexOf("/"); //symbol '/' position
    final String path = url.substring(position + 1);
    imageView.setImageBitmap(createVideoThumbnail(url, size, size));
    imageView.setOnClickListener(new OnClickListener() {
      @Override
      public void onClick(View v) {
        final File file = new File(DirUtils.getVideoDirectory(), path);
        if (file.exists()) {
          mVideoView.setVideoPath(file.getAbsolutePath());
        } else {
          thread.background(new Runnable() {
            @Override
            public void run() {
              try {
                download(url, file.getAbsolutePath());
              } catch (MalformedURLException e) {
                e.printStackTrace();
              }
            }
          });
          mVideoView.setVideoURI(Uri.parse(url));
        }
        mVideoLayout.setVisibility(VISIBLE);
        mVideoView.setVisibility(VISIBLE);
        mVideoView.setMediaController(new MediaController(context));
        mVideoView.requestFocus();
        mVideoView.start();
      }
    });
    return imageView;
  }

  private CustomTextView addBeginButton(final int type, final String passWord, final int order){
    CustomTextView customTextView = new CustomTextView(context);
    customTextView.setLayoutParams(textParams);
    int padding = (int) context.getResources().getDimension(R.dimen.clue_display_item_padding);
    customTextView.setPadding(padding, padding, padding, padding);
    customTextView.setCompoundDrawablesWithIntrinsicBounds(context.getResources().getDrawable(R.mipmap.ic_play_arrow),null,null,null);
    customTextView.setGravity(Gravity.CENTER_VERTICAL);
    customTextView.setText("开始解密");
    customTextView.setOnClickListener(new OnClickListener() {
      @Override
      public void onClick(View v) {
        listener.onBeginDecode(type,passWord,order);
      }
    });

    return customTextView;
  }

  private Bitmap createVideoThumbnail(String url, int width, int height) {
    Bitmap bitmap = null;
    MediaMetadataRetriever retriever = new MediaMetadataRetriever();
    try {
      retriever.setDataSource(url, new HashMap<String, String>());
      bitmap = retriever.getFrameAtTime();
    } catch (RuntimeException ex) {
      // Assume this is a corrupt video file.
    } finally {
      try {
        retriever.release();
      } catch (RuntimeException ex) {
        // Ignore failures while cleaning up.
      }
    }
    return Bitmap.createScaledBitmap(bitmap, width, height, true);
  }

  @OnClick(R.id.clue_display_image_view)
  void imageViewDismiss() {
    mImageView.setVisibility(GONE);
  }

  @OnClick(R.id.clue_display_video_layout)
  void videoViewDismiss() {
    if (mVideoView.isPlaying()) {
      return;
    }
    mVideoLayout.setVisibility(GONE);
    mVideoView.setVisibility(GONE);
  }

  private void download(String url, String absolutePath) throws MalformedURLException {

    if (!NetworkUtil.checkIsNetworkConnected()) {
      ToastUtil.TextToast("请连接网络");
      return;
    }

    URL mUrl = new URL(url);

    try {
      URLConnection connect = mUrl.openConnection();
      InputStream in = connect.getInputStream();
      FileOutputStream fs = new FileOutputStream(absolutePath);

      byte[] buffer = new byte[1024 * 128];
      int len;
      while ((len = in.read(buffer)) != -1) {
        fs.write(buffer, 0, len);
      }
      fs.flush();
      fs.close();
      in.close();

    } catch (IOException e) {
      e.printStackTrace();
    }

  }

  public boolean stop(){

    if (mImageView.getVisibility() == VISIBLE ){
      mImageView.setVisibility(GONE);
      return true;
    }
    if (mVideoLayout.getVisibility() == VISIBLE){
      mVideoView.pause();
      mVideoLayout.setVisibility(GONE);
      mVideoView.setVisibility(GONE);
      return true;
    }
    if(player.isPlaying()){
      player.pause();
      lastView.setImageResource(R.mipmap.ic_play_arrow);
      return true;
    }
    return false;
  }

  public interface OnBeginDecodeListener{
    void onBeginDecode(int type,String passWord,int order);
  }

}
